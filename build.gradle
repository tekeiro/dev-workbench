buildscript {
	ext {
		kotlinVersion = '1.1.3'
		springBootVersion = '1.5.4.RELEASE'
	}
	repositories {
		mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

ext["thymeleaf.version"] = "3.0.2.RELEASE"
ext["thymeleaf-layout-dialect.version"] = "2.0.1"

jar {
	archiveName = 'dev-workbench.jar'
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/java')
		}
		kotlin {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/kotlin')
		}
		resources.srcDir file('src/integration-test/resources')
	}
/*
    // This is just to trick IntelliJ IDEA to add integration test
    // resources to classpath when running integration tests from
    // the IDE. It's is not a good solution but I don't know about
    // a better one.
    test {
        resources.srcDir file('src/integration-test/resources')
    }
*/
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	mavenCentral()
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-log4j2')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-jersey')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-hateoas')

    compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.8.7")

    compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity4:3.0.0.RELEASE")
    compile("io.github.jpenren:thymeleaf-spring-data-dialect:3.1.1")

    compile('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml')

    testCompile('org.springframework.boot:spring-boot-starter-test')

    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('com.h2database:h2')

	integrationTestCompile sourceSets.main.output
	integrationTestCompile sourceSets.test.output
	integrationTestCompile configurations.compile
	integrationTestCompile configurations.testCompile
	integrationTestRuntime configurations.runtime
	integrationTestRuntime configurations.testRuntime

	optional "org.springframework.boot:spring-boot-configuration-processor"
}

test {
	systemProperty("spring.profiles.active", project.properties.get("springTestProfile")?:'test')

	testLogging {
		showStandardStreams = false
		events "passed", "skipped", "failed"
	}
}

task integrationTest(type: Test) {
	def profile = project.properties.get("springTestProfile") ?: 'it'
	println "Integrationtest will use Spring profile ${profile}"
	systemProperty("spring.profiles.active", profile)

	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath

	reports {
		html.destination = "$buildDir/reports/integration-test"
		junitXml.destination = "$buildDir/integration-test-results"
	}

	testLogging {
		events "passed", "skipped", "failed"
	}
	mustRunAfter tasks.test
}

defaultTasks 'build'
compileJava.dependsOn(processResources)